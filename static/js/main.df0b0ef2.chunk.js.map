{"version":3,"sources":["assets/img/logo.png","custom/loader/loader.component.js","config.js","utilities/HttpUtility.js","components/info-modal/info-modal.component.js","components/suggestion-modal/suggestion-modal.component.js","components/home/home.component.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loader","props","className","baseUrl","get","url","fetch","method","headers","generateHmacHeader","getDuid","then","res","json","post","payload","body","JSON","stringify","localStorage","getItem","generateDuid","date","Date","duid","Base64","MD5","toISOString","setItem","message","HmacMD5","InfoModal","alternateInput","useRef","useState","modalLive","setModalLive","selectedSuggestion","setSelectedSuggestion","alternateTerm","setAlternateTerm","AlternateSubmitting","setAlternateSubmitting","useEffect","Modal","toggle","isOpen","backdropClassName","product","icon","faTimes","onClick","isIndian","isCompany","parent","isIndianSubsidary","isForeign","isChinese","alternates","htmlFor","Input","placeholder","type","autoComplete","id","value","ref","disabled","onChange","e","currentTarget","length","Button","color","data","alternate","toast","success","error","SuggestionModal","missedSuggestion","setMissedSuggestion","suggestionSubmitting","setSuggestionSubmitting","clearSearchInput","Home","searchInput","showSearchClear","setShowSearchClear","searchTerm","setSearchTerm","showSuggestionLoading","setShowSuggestionLoading","suggestions","setSuggestions","searchTimeout","setSearchTimeout","infoModalLive","setInfoModalLive","suggestionModalLive","setSuggestionModalLive","trendingSearches","setTrendingSearches","showTrendingLoading","setShowTrendingLoading","clearInputField","current","focus","ReactGA","pageview","result","style","flex","src","require","alt","clearTimeout","cleanedSearchTerm","trim","timeout","setTimeout","faSearch","map","suggestion","key","suggestionSelected","faTimesCircle","faExclamationCircle","faCheckCircle","trendingItem","faChartLine","faInfo","UncontrolledPopover","trigger","placement","target","PopoverHeader","PopoverBody","listStyle","Routes","createBrowserHistory","listen","location","console","log","pathname","path","component","App","initialize","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.df0b0ef2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.32369161.png\";","import React from 'react';\r\nimport './loader.component.scss';\r\n\r\nconst Loader = (props) => {\r\n    return <div className=\"iit-spinner\">\r\n        <div className=\"bounce1\"></div>\r\n        <div className=\"bounce2\"></div>\r\n        <div className=\"bounce3\"></div>\r\n    </div>\r\n}\r\n\r\nexport default Loader;","export const baseUrl = !process.env.NODE_ENV || process.env.NODE_ENV === 'development' ? 'http://localhost:65450/' : 'https://api.isitindian.in/'\r\nexport const gaTrackingId = !process.env.NODE_ENV || process.env.NODE_ENV === 'development' ? 'UA-000' : 'UA-171016455-1'\r\n\r\n","import Base64 from 'crypto-js/enc-base64';\r\nimport { baseUrl } from '../config';\r\nimport { MD5, HmacMD5 } from 'crypto-js';\r\n\r\n\r\nexport const get = (url) => fetch(baseUrl + url, {\r\n    method: 'GET',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'shk-thalam': generateHmacHeader(url, '', 'GET'),\r\n        'shk-kaun': getDuid()\r\n    },\r\n}).then(res => res.json());\r\n\r\n\r\nexport const post = (url, payload) => fetch(baseUrl + url, {\r\n    method: 'POST',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n        'shk-thalam': generateHmacHeader(url, payload, 'POST'),\r\n        'shk-kaun': getDuid()\r\n    },\r\n    body: JSON.stringify(payload)\r\n}).then(res => res.json());\r\n\r\n\r\n\r\n\r\nconst getDuid = () => {\r\n    return localStorage.getItem(\"shk-duid\") || generateDuid();\r\n}\r\n\r\nconst generateDuid = () => {\r\n    let privateKey = \"pkmkb\";\r\n    let date = new Date();\r\n    let duid = Base64.stringify(MD5(date.toISOString(), privateKey));\r\n    localStorage.setItem(\"shk-duid\", duid);\r\n    return duid;\r\n}\r\n\r\nconst generateHmacHeader = (url, payload, method) => {\r\n    let privateKey = \"cheenmadarchod\";\r\n    let message = url + JSON.stringify(payload) + method + getDuid();\r\n    let digest = Base64.stringify(HmacMD5(message, privateKey));\r\n    return digest;\r\n}","import React, { useState, useRef, useEffect } from 'react';\r\nimport './info-modal.component.scss';\r\nimport Loader from '../../custom/loader/loader.component';\r\nimport { Modal, Input, Button } from 'reactstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { post } from '../../utilities/HttpUtility';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst InfoModal = (props) => {\r\n    const alternateInput = useRef(null);\r\n    const [modalLive, setModalLive] = useState(false);\r\n    const [selectedSuggestion, setSelectedSuggestion] = useState({});\r\n    const [alternateTerm, setAlternateTerm] = useState('');\r\n    const [AlternateSubmitting, setAlternateSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        setModalLive(props.modalLive);\r\n        setSelectedSuggestion(props.selectedSuggestion)\r\n    }, [props.modalLive, props.selectedSuggestion]);\r\n\r\n    function alternateSubmit() {\r\n        if (!alternateTerm || alternateTerm.length < 2) {\r\n            return;\r\n        }\r\n        setAlternateSubmitting(true);\r\n        let data = { product: selectedSuggestion.product, alternate: alternateTerm }\r\n        post(`api/product/addAlternate`, data)\r\n            .then(\r\n                () => {\r\n                    toast.success(\"Thanks for your submission!\");\r\n                    setAlternateTerm('');\r\n                    setAlternateSubmitting(false);\r\n                },\r\n                () => {\r\n                    toast.error(\"An error occoured!\");\r\n                    setAlternateSubmitting(false);\r\n                }\r\n            )\r\n    }\r\n\r\n    return <Modal toggle={() => props.setModalLive(false)} isOpen={modalLive} backdropClassName=\"item-info-modal-backdrop\">\r\n        <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\">{selectedSuggestion.product}</h5>\r\n            <FontAwesomeIcon icon={faTimes} className=\"pointer\" onClick={() => props.setModalLive(false)} />\r\n        </div>\r\n        <div className=\"modal-body\">\r\n            {\r\n                selectedSuggestion.isIndian &&\r\n                (\r\n                    selectedSuggestion.isCompany ?\r\n                        <div>\r\n                            {selectedSuggestion.product} is an <b className=\"text-success\">Indian</b> company.\r\n            </div>\r\n                        : <div>\r\n                            {selectedSuggestion.product} is by an <b className=\"text-success\">Indian</b> company {selectedSuggestion.parent !== null && selectedSuggestion.parent}\r\n                        </div>\r\n                )\r\n            }\r\n\r\n            {\r\n                selectedSuggestion.isIndianSubsidary &&\r\n                (\r\n                    selectedSuggestion.isCompany ?\r\n                        <div>\r\n                            {selectedSuggestion.product} is an <b>Indian subsidiary</b> company.\r\n              </div>\r\n                        : <div>\r\n                            {selectedSuggestion.product} is by {selectedSuggestion.parent !== null ? selectedSuggestion.parent + \"'s\" : \"an\"} <b> Indian subsidiary</b> company.\r\n              </div>\r\n                )\r\n            }\r\n            {\r\n                selectedSuggestion.isForeign &&\r\n                <div>\r\n                    {\r\n                        selectedSuggestion.isCompany ?\r\n                            <div>\r\n                                {selectedSuggestion.product} is a <b className=\"text-danger\">{selectedSuggestion.isChinese ? \"chinese\" : \"foreign\"}</b> company.\r\n            </div>\r\n                            : <div>\r\n                                {selectedSuggestion.product} is by a <b className=\"text-danger\">{selectedSuggestion.isChinese ? \"chinese\" : \"foreign\"}</b> company {selectedSuggestion.parent !== null && selectedSuggestion.parent}\r\n                            </div>\r\n                    }\r\n                    {\r\n                        selectedSuggestion.alternates !== null &&\r\n                        <div className=\"text-info\">\r\n                            <hr />\r\n                            <b className=\"text-light\">Alternates:</b> {selectedSuggestion.alternates}\r\n                        </div>\r\n                    }\r\n                    <br />\r\n                    <label htmlFor=\"alternate-input\">Suggest an alternate</label>\r\n                    <Input className=\"form-control-lg\" placeholder=\"Alternative\" type=\"text\" autoComplete=\"off\"\r\n                        id=\"alternate-input\" value={alternateTerm} ref={alternateInput} disabled={AlternateSubmitting}\r\n                        onChange={(e) => setAlternateTerm(e.currentTarget.value)}></Input>\r\n                    <div className=\"text-center\">\r\n                        {\r\n                            (alternateTerm && alternateTerm.length > 1) &&\r\n                            <Button color=\"primary\" onClick={alternateSubmit} disabled={AlternateSubmitting}>\r\n                                {AlternateSubmitting ? <Loader /> : \"Submit\"}\r\n                            </Button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    </Modal>\r\n}\r\n\r\n\r\nexport default InfoModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../info-modal/info-modal.component.scss';\r\nimport Loader from '../../custom/loader/loader.component';\r\nimport { Modal, Button } from 'reactstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { post } from '../../utilities/HttpUtility';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst SuggestionModal = (props) => {\r\n    const [modalLive, setModalLive] = useState(false);\r\n    const [missedSuggestion, setMissedSuggestion] = useState({});\r\n    const [suggestionSubmitting, setSuggestionSubmitting] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        setModalLive(props.modalLive);\r\n        setMissedSuggestion(props.missedSuggestion)\r\n    }, [props.modalLive, props.missedSuggestion]);\r\n\r\n    function suggestionSubmit() {\r\n        setSuggestionSubmitting(true);\r\n        let data = { product: missedSuggestion }\r\n        post(`api/product/addSuggestion`, data)\r\n            .then(\r\n                () => {\r\n                    setSuggestionSubmitting(false);\r\n                    props.clearSearchInput();\r\n                    props.setModalLive(false);\r\n                    toast.success(\"Thanks for your submission!\");\r\n                },\r\n                () => {\r\n                    toast.error(\"An error occoured!\");\r\n                    setSuggestionSubmitting(false);\r\n                }\r\n            )\r\n    }\r\n\r\n    return <Modal toggle={() => props.setModalLive(false)} isOpen={modalLive} backdropClassName=\"item-info-modal-backdrop\">\r\n        <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\">New Suggestion</h5>\r\n            <FontAwesomeIcon icon={faTimes} className=\"pointer\" onClick={() => props.setModalLive(false)} />\r\n        </div>\r\n        <div className=\"modal-body\">\r\n            Do you wish to submit {missedSuggestion}?\r\n            <div className=\"text-center\">\r\n                <Button color=\"primary\" onClick={suggestionSubmit} disabled={suggestionSubmitting}>\r\n                    {suggestionSubmitting ? <Loader /> : \"Submit\"}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    </Modal>\r\n}\r\n\r\n\r\nexport default SuggestionModal;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport './home.component.scss';\r\nimport Loader from '../../custom/loader/loader.component';\r\nimport { UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap';\r\nimport ReactGA from 'react-ga';\r\nimport InfoModal from '../info-modal/info-modal.component';\r\nimport SuggestionModal from '../suggestion-modal/suggestion-modal.component';\r\nimport { get } from '../../utilities/HttpUtility';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch, faTimes, faChartLine, faInfo, faCheckCircle, faTimesCircle, faExclamationCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { toast } from 'react-toastify';\r\n\r\nconst Home = () => {\r\n  const searchInput = useRef(null);\r\n  const [showSearchClear, setShowSearchClear] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [showSuggestionLoading, setShowSuggestionLoading] = useState(false);\r\n  const [suggestions, setSuggestions] = useState([]);\r\n  const [searchTimeout, setSearchTimeout] = useState();\r\n  const [infoModalLive, setInfoModalLive] = useState(false);\r\n  const [suggestionModalLive, setSuggestionModalLive] = useState(false);\r\n  const [selectedSuggestion, setSelectedSuggestion] = useState({});\r\n  const [trendingSearches, setTrendingSearches] = useState([]);\r\n  const [showTrendingLoading, setShowTrendingLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    searchInput.current.focus();\r\n    ReactGA.pageview(\"/home\");\r\n    getTrending();\r\n  }, []);\r\n\r\n  function getTrending() {\r\n    get(`api/product/GetTrending`)\r\n      .then(\r\n        (result) => {\r\n          setShowTrendingLoading(false);\r\n          setTrendingSearches(result);\r\n        },\r\n        () => {\r\n          toast.error(\"An error occoured\");\r\n          setShowTrendingLoading(false);\r\n        }\r\n      );\r\n  }\r\n\r\n  function onChange(e) {\r\n    clearTimeout(searchTimeout)\r\n    setShowSuggestionLoading(false);\r\n    setSuggestions([]);\r\n\r\n    let searchTerm = e.currentTarget.value;\r\n    setSearchTerm(e.currentTarget.value);\r\n    let cleanedSearchTerm = searchTerm.trim();\r\n    if (cleanedSearchTerm && cleanedSearchTerm.length > 0) {\r\n      setShowSearchClear(true);\r\n    }\r\n    else {\r\n      setShowSearchClear(false);\r\n    }\r\n    if (cleanedSearchTerm && cleanedSearchTerm.length < 2) {\r\n    }\r\n\r\n    if (cleanedSearchTerm && cleanedSearchTerm.length >= 2) {\r\n      setShowSuggestionLoading(true);\r\n      let timeout = setTimeout(() => {\r\n        get(`api/product/get/${cleanedSearchTerm}`)\r\n          .then(\r\n            (result) => {\r\n              setShowSuggestionLoading(false);\r\n              setSuggestions(result);\r\n            },\r\n            () => {\r\n              toast.error(\"An error occoured, try again!\");\r\n              setSearchTerm(\"\");\r\n              setShowSuggestionLoading(false);\r\n              setSuggestions([]);\r\n            }\r\n          )\r\n      }, 500);\r\n      setSearchTimeout(timeout);\r\n    }\r\n  }\r\n\r\n  function clearInputField() {\r\n    setSearchTerm('');\r\n    setShowSearchClear(false);\r\n    setShowSuggestionLoading(false);\r\n    setSuggestions([]);\r\n    searchInput.current.focus();\r\n  }\r\n\r\n  function suggestionSelected(suggestion) {\r\n    setSelectedSuggestion(suggestion);\r\n    setInfoModalLive(true);\r\n    get(`api/product/peeked/${suggestion.product}`);\r\n  }\r\n\r\n  function trendingSelected(suggestion) {\r\n    setSelectedSuggestion(suggestion);\r\n    setInfoModalLive(true);\r\n  }\r\n\r\n  function submitSuggestion() {\r\n    setSuggestionModalLive(true);\r\n  }\r\n\r\n  return <div className=\"w-100 h-100 overflow-auto\">\r\n    <div className=\"container d-flex flex-column align-items-center justify-content-center1 w-100 h-100 main-container\">\r\n\r\n      <div className=\"col-9 col-lg-6\" style={{ flex: 0 }}>\r\n        <img src={require(`../../assets/img/logo.png`)} className=\"img-fluid\" alt=\"IsItIndian\" />\r\n      </div>\r\n\r\n      <div className=\"search-wrapper text-center d-flex flex-row my-3 p-0 col-10 col-lg-6\">\r\n        <input type=\"text\" className=\"flex-grow-1\" autoComplete=\"off\" placeholder=\"Search\"\r\n          onChange={onChange} value={searchTerm} ref={searchInput} />\r\n\r\n        {showSearchClear && <FontAwesomeIcon icon={faTimes} className=\"times-icon\" onClick={clearInputField} />}\r\n\r\n        <div className=\"divider\"></div>\r\n        <FontAwesomeIcon icon={faSearch} className=\"search-icon\" />\r\n        <div className=\"suggestion-list-wrapper\">\r\n          {showSuggestionLoading &&\r\n            <div className=\"suggestion-loading\">\r\n              <Loader />\r\n            </div>\r\n          }\r\n          {\r\n            suggestions.length > 0 &&\r\n            <div className=\"suggestion-list w-100\">\r\n              <ul className=\"p-0 m-0\">\r\n                {\r\n                  suggestions.map((suggestion) => {\r\n                    return <li key={suggestion.product} className=\"suggetion-list-element\" onClick={() => suggestionSelected(suggestion)}>\r\n                      <FontAwesomeIcon icon={(suggestion.isForeign ? faTimesCircle : suggestion.isIndianSubsidary ? faExclamationCircle : faCheckCircle)}\r\n                        className={\"mr-1 \" + (suggestion.isForeign ? \"text-danger\" : suggestion.isIndianSubsidary ? \"text-warning\" : \"text-success\")} />\r\n                      <span className=\"suggetion-list-element-text\">{suggestion.product}</span>\r\n                    </li>\r\n                  })\r\n                }\r\n              </ul>\r\n            </div>\r\n          }\r\n          {\r\n            (suggestions.length === 0 && searchTerm.length > 1 && !showSuggestionLoading) &&\r\n            <div className=\"suggestion-count-zero\">\r\n              <div>No matching results!</div>\r\n              <div className=\"link-style\" onClick={() => submitSuggestion()}>Are we missing it? Submit a suggestion</div>\r\n            </div>\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n      {\r\n        trendingSearches &&\r\n        <div className=\"trending-section text-center d-flex flex-column p-0 col-10 col-lg-6\">\r\n          <p className=\"w-100 text-center trending-head\">Trending</p>\r\n          {\r\n            showTrendingLoading ? <Loader /> :\r\n              <div className=\"trending-badges w-100 d-flex flex-row\">\r\n                {\r\n                  trendingSearches.map((trendingItem) => {\r\n                    return <div key={trendingItem.product} className=\"trending-item\" onClick={() => trendingSelected(trendingItem)}>\r\n                      <FontAwesomeIcon icon={faChartLine} className=\"trending-icon\" />\r\n                      {trendingItem.product}\r\n                    </div>\r\n                  })\r\n                }\r\n              </div>\r\n          }\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n\r\n    <InfoModal modalLive={infoModalLive} selectedSuggestion={selectedSuggestion} setModalLive={setInfoModalLive}></InfoModal>\r\n\r\n    <SuggestionModal modalLive={suggestionModalLive} missedSuggestion={searchTerm} clearSearchInput={clearInputField} setModalLive={setSuggestionModalLive}></SuggestionModal>\r\n    <div className=\"page-help-icon\" id=\"info-popover\"><FontAwesomeIcon icon={faInfo} /></div>\r\n    <UncontrolledPopover trigger=\"legacy\" placement=\"right\" target=\"info-popover\" className=\"bg-custom\">\r\n      <PopoverHeader className=\"text-light\">Icon Legends</PopoverHeader>\r\n      <PopoverBody className=\"text-light\">\r\n        <ul className=\"p-0 m-0\" style={{ listStyle: \"none\" }}>\r\n          <li>\r\n            <FontAwesomeIcon className=\"text-success\" icon={faCheckCircle} /> - <span>Indian Company</span>\r\n          </li>\r\n          <li>\r\n            <FontAwesomeIcon className=\"text-warning\" icon={faExclamationCircle} /> - <span>Foreign (except china) company with Indian subsidiary</span>\r\n          </li>\r\n          <li>\r\n            <FontAwesomeIcon className=\"text-danger\" icon={faTimesCircle} /> - <span>Foreign Company or any chinese Company</span>\r\n          </li>\r\n        </ul>\r\n      </PopoverBody>\r\n    </UncontrolledPopover>\r\n  </div >\r\n}\r\n\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { createBrowserHistory } from 'history';\r\nimport ReactGA from 'react-ga';\r\nimport Home from './components/home/home.component';\r\n// import Product from './components/product/product.component';\r\n\r\nfunction Routes() {\r\n\r\n    const history = createBrowserHistory();\r\n    history.listen(location => {\r\n        console.log(123);\r\n        ReactGA.pageview(location.pathname); // Record a pageview for the given page\r\n    });\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/home\" component={Home} />\r\n            <Route path=\"/\" component={Home} />\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default Routes;","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.scss'\nimport Routes from './routes';\nimport ReactGA from 'react-ga';\nimport { gaTrackingId } from './config';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n\nfunction App() {\n  ReactGA.initialize(gaTrackingId);\n  return (\n    <Router>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={5000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover />\n      <Routes />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./assets/css/bootstrap.min.css\";\nimport \"./assets/scss/now-ui-kit.scss\";\nimport \"./assets/demo/demo.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}